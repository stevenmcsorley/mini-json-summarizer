name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Check code formatting
      run: |
        pip install black
        black --check app/ tests/

    - name: Run type checking
      run: |
        pip install mypy
        mypy app/ --ignore-missing-imports || true

    - name: Security scan
      run: |
        pip install bandit
        bandit -r app/ -ll

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        extra_args: --only-verified

  integration-tests:
    runs-on: ubuntu-latest
    needs: pr-validation

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Start service
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8080 &
        sleep 5

    - name: Run edge case tests
      run: |
        bash edge_cases_strict.sh

    - name: Run load tests
      run: |
        bash load_smoke.sh || true

  pr-comment:
    runs-on: ubuntu-latest
    needs: [pr-validation, integration-tests]
    if: always()

    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });

          const failed = checks.check_runs.filter(c => c.conclusion === 'failure');
          const passed = checks.check_runs.filter(c => c.conclusion === 'success');

          const body = `## PR Check Results

          ✅ Passed: ${passed.length}
          ❌ Failed: ${failed.length}

          ${failed.length > 0 ? '### Failed Checks\n' + failed.map(f => `- ${f.name}`).join('\n') : '### All checks passed!'}
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
